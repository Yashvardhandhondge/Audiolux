// Keep your existing models intact

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())  // Keep your existing id field as uuid
  email         String          @unique
  name          String?
  password      String?
  provider      Provider
  streams       Stream[]        @relation("user")
  upvotes       Upvote[]        
  addedStreams  Stream[]        @relation("addedBy")
  hostedSpaces  Space[]         @relation("hostedBy")
  
  // NextAuth relations added below
  emailVerified DateTime?       // Email verification timestamp
  image         String?         // Profile image URL
  accounts      Account[]       // Accounts linked to this user (GitHub, credentials)
  sessions      Session[]       // User sessions
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String          // e.g., "oauth"
  provider          String          // e.g., "github"
  providerAccountId String          // Unique GitHub account ID
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Stream {
  id String @id @default(uuid())
  type StreamType
  url String
  extractedId String
  title String @default("")
  smallImg String @default("")
  bigImg String @default("")
  active Boolean @default(true)
  played Boolean @default(false)
  playedTs DateTime?
  createdAt DateTime @default(now())
  upvotes Upvote[] 
  userId String
  user User @relation(fields: [userId], references: [id], name: "user")
  currentStream CurrentStream?
  addedBy String
  addedByUser User @relation("addedBy", fields: [addedBy], references: [id])
  spaceId String?
  space Space? @relation("spaceStreams", fields: [spaceId], references: [id], onDelete: Cascade)
}

model CurrentStream {
  id String @id @default(uuid())
  userId String
  streamId String? @unique
  stream Stream? @relation(fields: [streamId], references: [id])
  spaceId String? @unique
  space Space? @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Upvote {
  id String @id @default(uuid())
  userId String
  streamId String
  user User @relation(fields: [userId], references: [id])
  stream Stream @relation(fields: [streamId], references: [id])
  @@unique([userId, streamId]) 
}

model Space {
  id String @id @default(uuid())
  name String
  streams Stream[] @relation("spaceStreams")
  hostId String
  host User @relation("hostedBy", fields: [hostId], references: [id])
  isActive Boolean @default(true)
  currentStream CurrentStream?
}

enum StreamType {
  Spotify
  Youtube
}

enum Provider {
  Github
  Credentials
}
